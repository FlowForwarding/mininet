{"name":"Mininet","tagline":"Emulator for rapid prototyping of Software Defined Networks","body":"Mininet: Rapid Prototyping for Software Defined Networks\r\n========================================================\r\n\r\n*The best way to emulate almost any network on your laptop!*\r\n\r\nVersion 2.1.0\r\n\r\n### What is Mininet?\r\n\r\nMininet emulates a complete network of hosts, links, and switches\r\non a single machine.  To create a sample two-host, one-switch network,\r\njust run:\r\n\r\n  `sudo mn`\r\n\r\nMininet is useful for interactive development, testing, and demos,\r\nespecially those using OpenFlow and SDN.  OpenFlow-based network\r\ncontrollers prototyped in Mininet can usually be transferred to\r\nhardware with minimal changes for full line-rate execution.\r\n\r\n### How does it work?\r\n\r\nMininet creates virtual networks using process-based virtualization\r\nand network namespaces - features that are available in recent Linux\r\nkernels.  In Mininet, hosts are emulated as `bash` processes running in\r\na network namespace, so any code that would normally run on a Linux\r\nserver (like a web server or client program) should run just fine\r\nwithin a Mininet \"Host\".  The Mininet \"Host\" will have its own private\r\nnetwork interface and can only see its own processes.  Switches in\r\nMininet are software-based switches like Open vSwitch or the OpenFlow\r\nreference switch.  Links are virtual ethernet pairs, which live in the\r\nLinux kernel and connect our emulated switches to emulated hosts\r\n(processes).\r\n\r\n### Features\r\n\r\nMininet includes:\r\n\r\n* A command-line launcher (`mn`) to instantiate networks.\r\n\r\n* A handy Python API for creating networks of varying sizes and\r\n  topologies.\r\n\r\n* Examples (in the `examples/` directory) to help you get started.\r\n\r\n* Full API documentation via Python `help()` docstrings, as well as\r\n  the ability to generate PDF/HTML documentation with `make doc`.\r\n\r\n* Parametrized topologies (`Topo` subclasses) using the Mininet\r\n  object.  For example, a tree network may be created with the\r\n  command:\r\n\r\n  `mn --topo tree,depth=2,fanout=3`\r\n\r\n* A command-line interface (`CLI` class) which provides useful\r\n  diagnostic commands (like `iperf` and `ping`), as well as the\r\n  ability to run a command to a node. For example,\r\n\r\n  `mininet> h11 ifconfig -a`\r\n\r\n  tells host h11 to run the command `ifconfig -a`\r\n\r\n* A \"cleanup\" command to get rid of junk (interfaces, processes, files\r\n  in /tmp, etc.) which might be left around by Mininet or Linux. Try\r\n  this if things stop working!\r\n\r\n  `mn -c`\r\n\r\n### New features in 2.1.0\r\n\r\nMininet 2.1.0 provides a number of bug fixes as well as\r\nseveral new features, including:\r\n\r\n* Convenient access to `Mininet()` as a dict of nodes\r\n* X11 tunneling (wireshark in Mininet hosts, finally!)\r\n* Accurate reflection of the `Mininet()` object in the CLI\r\n* Automatically detecting and adjusting resource limits\r\n* Automatic cleanup on failure of the `mn` command\r\n* Preliminary support for running OVS in user space mode\r\n* Preliminary support (`IVSSwitch()`) for the Indigo Virtual Switch\r\n* support for installing the OpenFlow 1.3 versions of the reference\r\n  user switch and NOX from CPqD\r\n* The ability to import modules from `mininet.examples`\r\n\r\nWe have provided several new examples (which can easily be\r\nimported to provide useful functionality) including:\r\n\r\n* Modeling separate control and data networks: `mininet.examples.controlnet`\r\n* Connecting Mininet hosts the internet (or a LAN) using NAT: `mininet.examples.nat`\r\n* Creating per-host custom directories using bind mounts: `mininet.examples.bind`\r\n\r\nNote that examples contain experimental features which might\r\n\"graduate\" into mainline Mininet in the future, but they should \r\nnot be considered a stable part of the Mininet API!\r\n\r\n### Installation\r\n\r\nSee `INSTALL` for installation instructions and details.\r\n\r\n### Documentation\r\n\r\nIn addition to the API documentation (`make doc`), much useful\r\ninformation, including a Mininet walkthrough and an introduction\r\nto the Python API, is available on the\r\n[Mininet Web Site](http://mininet.org).\r\nThere is also a wiki which you are encouraged to read and to\r\ncontribute to, particularly the Frequently Asked Questions (FAQ.)\r\n\r\n### Support\r\n\r\nMininet is community-supported. We encourage you to join the\r\nMininet mailing list, `mininet-discuss` at:\r\n\r\n<https://mailman.stanford.edu/mailman/listinfo/mininet-discuss>\r\n\r\n### Contributing\r\n\r\nMininet is an open source project and is currently hosted\r\nat <https://github.com/mininet>.  You are encouraged to download\r\nthe code, examine it, modify it, and submit bug reports, bug fixes,\r\nfeature requests, new features and other issues and pull requests.\r\nThanks to everyone who has contributed to the project\r\n(see CONTRIBUTORS for more info!)\r\n\r\nBest wishes, and we look forward to seeing what you can do with\r\nMininet to change the networking world!\r\n\r\n### Credits\r\n\r\nThe Mininet 2.1.0 Team:\r\n\r\n* Bob Lantz\r\n* Brian O'Connor\r\n","google":"UA-44706275-1","note":"Don't delete this file! It's used internally to help with page regeneration."}